// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TTGService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class TTGServiceHandler : virtual public TTGServiceIf {
 public:
  TTGServiceHandler() {
    // Your initialization goes here
  }

  void getStudentInfo(Response& _return, const Request& request) {
    // Your implementation goes here
	
	if(request.studentId == 10){
		printf("request studentId = 10\n");
		Response _response;
		_response.studentId = request.studentId;
		_response.name = "tutuge";
		_response.infos.push_back("Info 1");
		_response.infos.push_back("Info 2");
		_response.state = ResponseState::StateOk;
		
		_return = _response;
	}

    printf("getStudentInfo\n");
  }

};

int main(int argc, char **argv) {
  int port = 19090;
  shared_ptr<TTGServiceHandler> handler(new TTGServiceHandler());
  shared_ptr<TProcessor> processor(new TTGServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

